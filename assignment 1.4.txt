Explain jwt in approx and prove its top 3 benefits.

- A JSON web token is JSON Object which is used to securely transfer information over the web.
- A JWT is a self-contained method that can be used securely transmit data between two endpoints. 
- JWTs are most commonly used for user authentication. 
- It can be used for an authentication system and can also be used for information exchange.
- The token is mainly composed of header, payload, signature.

Header
- JWT header contains metadata about the token in JSON format. 
- Two fields present in the header are alg and typ.
- ’alg’ specifies the algorithm used to sign the token when generating the signature, which we will talk about in a moment. 
- ’typ’ specifies the type of the token, which is ’JWT’. 
- A typical token header is shown in the following example.

{
    "alg": "RS256",
    "typ": "JWT"
}

- Here, the header states the algorithm used to sign the token is RS256.
- The header is stored as the first part of the token after being encoded in base64url.

Payload
- The payload of a JWT stores information about the token and any other entity in JSON format. 
- Usually, a JWT used for authentication stores some crucial information about the user, such as the user ID and user role. 
- Token storing user information usually looks like this.

{
    "id": "1234591",
    "name": "Mary Poppins",
    "role": "editor"
}
- These JSON fields stored in the payload are known as claims.
- a few standard claims that are used
	iss: Defines the issuer of the token.
	exp: Provides an expiration time to the token. Once this expiration time is passed, the token is no longer valid.
	aud: Defines the audience of the token.
	iat: Stores the time the token was issued at.
- then claims looks like.

{
    "id": "1234591",
    "name": "Mary Poppins",
    "role": "editor",
    "iss": "mywebsite.com",
    "exp": 3600
}

Signature
- The last part of a JWT token, the signature, is a Message Authentication Code that is used to verify the token was not modified or generated by an outsider except the authorized application servers.
- Signature is generated by signing the combined JWT header and payload using an encryption algorithm and a secret stored in the server. 
- Only someone who has the token’s header and payload and the secret can generate a sign accepted by the server. 
- So, it is important to use a strong secret to encrypt tokens and securely store it in the server.

Benifits :
- More compact: JSON is less verbose than XML, so when it is encoded, a JWT is smaller than a SAML token. This makes JWT a good choice to be passed in HTML and HTTP environments.
- More secure: JWTs can use a public/private key pair in the form of an X.509 certificate for signing. A JWT can also be symmetrically signed by a shared secret using the HMAC algorithm. And while SAML tokens can use public/private key pairs like JWT, signing XML with XML Digital Signature without introducing obscure security holes is very difficult when compared to the simplicity of signing JSON. 
- More common: JSON parsers are common in most programming languages because they map directly to objects. Conversely, XML doesn't have a natural document-to-object mapping. This makes it easier to work with JWT than SAML assertions.
- Easier to process: JWT is used at internet scale. This means that it is easier to process on user's devices, especially mobile.
